# This workflow will be triggered on every PR on the main branch
# Note : if an XML file is not present, the job is canceled

# To get started, configure the following in your repos secrets https://docs.github.com/en/actions/security-guides/encrypted-secrets
# SOLACE_CLOUD_TOKEN: Solace Cloud Token
# TF_VAR_solace_url: SEMP URL for target broker
# TF_VAR_semp_username: SEMP username for target broker
# TF_VAR_semp_password: SEMP password for target broker
# SOL_MSG_VPN: Solace VPN
# AWS_ACCESS_KEY_ID: AWS ACCESS KEY ID
# AWS_SECRET_ACCESS_KEY: AWS SECRET ACCESS KEY

name: Terraform Plan with Application Version ID from mule xml
on:
  pull_request: 
    branches: [ main ]

env: 
  SOLACE_MESSAGING_SERVICE: PRODUCTION-solace

jobs:
  plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        
      - name: Get all changed markdown files
        id: changed-markdown-files
        uses: tj-actions/changed-files@v40
        with:
          files: | 
            src/main/mule/**.xml
      
      - name: Read Mule XML content
        id: mule_xml
        run: |
          for file in ${{ steps.changed-markdown-files.outputs.all_changed_files }}; do
            echo 'xml<<EOF' >> $GITHUB_OUTPUT
            echo $(cat $file) >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          done
      
      - name: Extract Application Version ID from Mule config
        if: ${{ steps.mule_xml.outputs.xml }}
        uses: tmelliottjr/extract-regex-action@v1.4.0
        id: epApplicationVersionId
        with:
          regex: '(?<=name=\"epApplicationVersionId\" value=\")(.*)(?=\")' 
          flags: "gm"
          input: ${{steps.mule_xml.outputs.xml}}

      - name: Plan
        if: ${{ steps.epApplicationVersionId.outputs.resultString }}
        id: plan
        uses: SolaceDev/solace-ep-provisioning-github-action@v1.11.15
        with:
          BROKER_TYPE: solace
          SOLACE_MESSAGING_SERVICE: ${{ env.SOLACE_MESSAGING_SERVICE }}
          SOLACE_CLOUD_TOKEN: ${{ secrets.SOLACE_CLOUD_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY}}
          TF_VAR_solace_url: ${{ secrets.TF_VAR_solace_url }}
          TF_VAR_semp_username: ${{ secrets.TF_VAR_semp_username }}
          TF_VAR_semp_password: ${{ secrets.TF_VAR_semp_password }}
          SOL_MSG_VPN: ${{ secrets.SOL_MSG_VPN }}
          APPLICATION_VERSION_ID: ${{ steps.epApplicationVersionId.outputs.resultString }}
          PLAN_ONLY: true

      - name: PR Comment with Terraform Plan
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.tf_plan }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\` *`;
      
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
